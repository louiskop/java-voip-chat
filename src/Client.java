import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.event.SwingPropertyChangeSupport;

/**
 * The Client class represents the main frame of the client application. It
 * extends the JFrame class and
 * implements ActionListener and Runnable interfaces to handle the events and
 * perform background
 * tasks, respectively.
 * 
 * This class maintains a Socket instance to connect to the server and an
 * ObjectInputStream and
 * ObjectOutputStream instances to communicate with the server. It also
 * maintains HashMaps to store
 * private and group session frames, a sessionId to uniquely identify the
 * session, an invitee to
 * store the user to invite to a private session, a username to store the
 * client's username, a
 * userList to store the list of currently online users, a clientFrame to store
 * the current instance
 * of the frame, vnCount to count the number of voice notes received, and
 * vnReceived to store the
 * list of received voice notes.
 */
public class Client extends javax.swing.JFrame {

	Socket socket;
	ObjectInputStream in;
	ObjectOutputStream out;
	HashMap<Integer, PrivateSession> privateFrames = new HashMap<Integer, PrivateSession>();
	HashMap<Integer, GroupSession> groupFrames = new HashMap<Integer, GroupSession>();
	volatile Integer sessionId = -1;
	String invitee;
	String username;
	ArrayList<String> userList;
	Client clientFrame;

	// voice note variables
	Integer vnCount = 0;
	ArrayList<String> vnReceived = new ArrayList<String>();

	/**
	 * Creates new form Client
	 * 
	 * @param socket   the Socket instance to connect to the server
	 * @param in       the ObjectInputStream instance to read data from the server
	 * @param out      the ObjectOutputStream instance to write data to the server
	 * @param username the username of the client
	 * 
	 * @throws Exception if an error occurs while initializing the frame or
	 *                   listening to the server
	 */
	public Client(Socket socket, ObjectInputStream in, ObjectOutputStream out, String username)
			throws Exception {
		this.socket = socket;
		this.in = in;
		this.out = out;
		this.username = username;
		this.clientFrame = this;
		initComponents();
		scaleImage(jLabel1, "/images/tschat-logo.png");
		listenTCP();

		// request userList
		Packet packet = new Packet("getUserList", null, null);
		out.writeObject(packet);

		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				// send disconnect packet
				Packet packet = new Packet("disconnect", null, null);
				try {
					out.writeObject(packet);
				} catch (IOException err) {
					err.printStackTrace();
				}

				// dispose window and exit program
				clientFrame.dispose();
				System.exit(0);

			}
		});

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel9 = new javax.swing.JPanel();
		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		jPanel3 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jList1 = new javax.swing.JList<>();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jPanel5 = new javax.swing.JPanel();
		jLabel7 = new javax.swing.JLabel();
		jPanel6 = new javax.swing.JPanel();
		jLabel8 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jPanel9.setBackground(new java.awt.Color(33, 36, 43));

		jPanel1.setBackground(new java.awt.Color(45, 49, 58));

		jLabel1.setText("jLabel1");

		jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
		jLabel2.setForeground(new java.awt.Color(255, 255, 255));
		jLabel2.setText("tsChat.v2");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addGap(21, 21, 21)
								.addComponent(jLabel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										56,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel2,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addContainerGap()));
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout
								.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanel1Layout.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel2,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												56,
												Short.MAX_VALUE)
										.addComponent(jLabel1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE))
								.addContainerGap()));

		jPanel2.setBackground(new java.awt.Color(45, 49, 58));

		jPanel3.setBackground(new java.awt.Color(137, 76, 223));

		jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
		jLabel3.setForeground(new java.awt.Color(255, 255, 255));
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel3.setText("Online users");

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel3Layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel3,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										203, Short.MAX_VALUE)
								.addContainerGap()));
		jPanel3Layout.setVerticalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel3,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										40, Short.MAX_VALUE)
								.addContainerGap()));

		jScrollPane1.setBorder(null);

		jList1.setBackground(new java.awt.Color(45, 49, 58));
		jList1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
		jList1.setForeground(new java.awt.Color(255, 255, 255));
		jList1.setModel(new javax.swing.AbstractListModel<String>() {
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

			public int getSize() {
				return strings.length;
			}

			public String getElementAt(int i) {
				return strings[i];
			}
		});
		jList1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jList1MouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(jList1);

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(jPanel2Layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane1)
								.addContainerGap()));
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel2Layout.createSequentialGroup()
								.addComponent(jPanel3,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										365,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));

		jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
		jLabel4.setForeground(new java.awt.Color(255, 255, 255));
		jLabel4.setText("Select a user and text them...");

		jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
		jLabel5.setForeground(new java.awt.Color(255, 255, 255));
		jLabel5.setText("Or you can");

		jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
		jLabel6.setForeground(new java.awt.Color(137, 76, 223));
		jLabel6.setText("create a Group!");

		jPanel5.setBackground(new java.awt.Color(33, 36, 43));
		jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(137, 76, 223), 4));

		jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
		jLabel7.setForeground(new java.awt.Color(137, 76, 223));
		jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel7.setText("Text user");
		jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jLabel7MouseClicked(evt);
			}

			public void mouseEntered(java.awt.event.MouseEvent evt) {
				jLabel7MouseEntered(evt);
			}

			public void mouseExited(java.awt.event.MouseEvent evt) {
				jLabel7MouseExited(evt);
			}
		});

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout.setHorizontalGroup(
				jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel5Layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel7,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addContainerGap()));
		jPanel5Layout.setVerticalGroup(
				jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel7,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										42, Short.MAX_VALUE)
								.addContainerGap()));

		jPanel6.setBackground(new java.awt.Color(33, 36, 43));
		jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(137, 76, 223), 4));

		jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
		jLabel8.setForeground(new java.awt.Color(137, 76, 223));
		jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel8.setText("Create group");
		jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jLabel8MouseClicked(evt);
			}

			public void mouseEntered(java.awt.event.MouseEvent evt) {
				jLabel8MouseEntered(evt);
			}

			public void mouseExited(java.awt.event.MouseEvent evt) {
				jLabel8MouseExited(evt);
			}
		});

		javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		jPanel6Layout.setHorizontalGroup(
				jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel6Layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel8,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addContainerGap()));
		jPanel6Layout.setVerticalGroup(
				jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel8,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										42, Short.MAX_VALUE)
								.addContainerGap()));

		javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
		jPanel9.setLayout(jPanel9Layout);
		jPanel9Layout.setHorizontalGroup(
				jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)
						.addGroup(jPanel9Layout.createSequentialGroup()
								.addGap(44, 44, 44)
								.addComponent(jPanel2,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										78,
										Short.MAX_VALUE)
								.addGroup(jPanel9Layout.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
												jPanel9Layout
														.createSequentialGroup()
														.addGroup(jPanel9Layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		false)
																.addComponent(jLabel4,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(jPanel5,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(jPanel6,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE))
														.addGap(46, 46, 46))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
												jPanel9Layout.createSequentialGroup()
														.addComponent(jLabel5)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jLabel6)
														.addGap(123, 123,
																123)))));
		jPanel9Layout.setVerticalGroup(
				jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel9Layout.createSequentialGroup()
								.addComponent(jPanel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(jPanel9Layout.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanel9Layout
												.createSequentialGroup()
												.addPreferredGap(
														javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														42,
														Short.MAX_VALUE)
												.addComponent(jPanel2,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(39, 39, 39))
										.addGroup(jPanel9Layout
												.createSequentialGroup()
												.addGap(128, 128, 128)
												.addComponent(jLabel4)
												.addPreferredGap(
														javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(jPanel9Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel5)
														.addComponent(jLabel6))
												.addGap(18, 18, 18)
												.addComponent(jPanel5,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(18, 18, 18)
												.addComponent(jPanel6,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addContainerGap(
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)))));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * Saves the username of the user you want to invite.
	 * 
	 * @param evt The java awt event
	 * 
	 * @throws Exception if an error occurs while initializing the frame or
	 *                   listening to the server
	 */
	private void jList1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jList1MouseClicked
		invitee = (String) jList1.getModel().getElementAt(jList1.locationToIndex(evt.getPoint()));

	}// GEN-LAST:event_jList1MouseClicked

	/**
	 * Create a group session.
	 * 
	 * @param evt The java awt event
	 * 
	 * @throws Exception if an error occurs while initializing the frame or
	 *                   listening to the server
	 */
	private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel8MouseClicked

		// create session with only current user
		Packet packet = new Packet("session", "Group", new ArrayList<>());
		try {
			out.writeObject(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}

		// wait to receive the sessionID
		while (sessionId == -1) {
		}

		// reset the session Id
		sessionId = -1;

	}// GEN-LAST:event_jLabel8MouseClicked

	/**
	 * Create a private session with the selected user.
	 * 
	 * @param evt The java awt event
	 * 
	 * @throws IOException Throws exception if socket cannot write the packet object
	 * 
	 */

	private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel7MouseClicked

		// create session with only current user
		Packet packet = new Packet("session", "", new ArrayList<>());

		try {
			out.writeObject(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}

		// wait to receive a valid sessionID
		while (sessionId == -1) {
		}

		// invite selected user
		packet = new Packet("invite", true, sessionId, invitee);

		try {
			out.writeObject(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}

		// reset sessionId
		sessionId = -1;

	}// GEN-LAST:event_jLabel7MouseClicked

	/**
	 * Creating interactivity for buttons in the application
	 * 
	 * @param evt The java awt event
	 * 
	 */
	private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel7MouseEntered
		// TODO add your handling code here:
		jLabel7.setForeground(jPanel5.getBackground());
		jPanel5.setBackground(new Color(137, 76, 223));
	}// GEN-LAST:event_jLabel7MouseEntered

	/**
	 * Creating interactivity for buttons in the application
	 * 
	 * @param evt The java awt event
	 * 
	 */
	private void jLabel7MouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel7MouseExited
		// TODO add your handling code here:
		jPanel5.setBackground(jLabel7.getForeground());
		jLabel7.setForeground(new Color(137, 76, 223));

	}// GEN-LAST:event_jLabel7MouseExited

	/**
	 * Creating interactivity for buttons in the application
	 * 
	 * @param evt The java awt event
	 * 
	 */
	private void jLabel8MouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel8MouseEntered
		// TODO add your handling code here:
		jLabel8.setForeground(jPanel6.getBackground());
		jPanel6.setBackground(new Color(137, 76, 223));
	}// GEN-LAST:event_jLabel8MouseEntered

	/**
	 * Creating interactivity for buttons in the application
	 * 
	 * @param evt The java awt event
	 * 
	 */
	private void jLabel8MouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel8MouseExited
		// TODO add your handling code here:
		jPanel6.setBackground(jLabel8.getForeground());
		jLabel8.setForeground(new Color(137, 76, 223));
	}// GEN-LAST:event_jLabel8MouseExited

	/**
	 * Scale an image to the desired size for UI
	 * 
	 * @param evt The java awt event
	 * 
	 */
	public void scaleImage(JLabel j, String image) {
		ImageIcon myImage = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource(image)));

		Image img1 = myImage.getImage();
		Image img2 = img1.getScaledInstance(j.getWidth() - 10, j.getHeight() - 10, Image.SCALE_SMOOTH);
		ImageIcon i = new ImageIcon(img2);
		j.setIcon(i);
	}

	/**
	 * Listen for all incoming TCP packets sent by the server and react accordingly.
	 * 
	 * @throws Exception when the socket cannot read the incoming TCP packet by the
	 *                   server.
	 * 
	 */
	public void listenTCP() {

		new Thread(() -> {
			while (socket.isConnected()) {
				try {

					// get packet
					Packet packet = (Packet) in.readObject();

					// variables for direct client communication
					InetAddress address;
					int port;

					// determine type and react accordingly
					switch (packet.type) {

						// get sessionid from server
						case "session":
							sessionId = packet.sessionId;
							break;

						case "notify":

							// create a frame
							GroupSession groupFrame = new GroupSession(userList,
									Integer.parseInt(packet.stringData),
									out, username, vnReceived);
							java.awt.EventQueue.invokeLater(new Runnable() {
								public void run() {
									groupFrame.setVisible(true);
								}
							});

							// add to hashmap
							groupFrames.put(Integer.parseInt(packet.stringData),
									groupFrame);
							break;

						case "notifyPrivate":

							String notMe = "";
							for (int i = 0; i < packet.listData.size(); i++) {
								if (username.equals(packet.listData.get(i))) {
									continue;
								}
								notMe = packet.listData.get(i);
							}

							// create a frame
							PrivateSession privateFrame = new PrivateSession(
									Integer.parseInt(packet.stringData),
									username, out, notMe, vnReceived);
							java.awt.EventQueue.invokeLater(new Runnable() {
								public void run() {
									privateFrame.setVisible(true);
								}
							});

							// add to hashmap
							privateFrames.put(Integer.parseInt(packet.stringData),
									privateFrame);
							break;

						case "message":
							System.out.println(
									"Received message from "
											+ packet.from
											+ ": "
											+ packet.messageData
											+ " SESSION ID =" + packet.to);

							String date = new java.util.Date().toString();
							date = date.substring(11, 16);

							if (packet.isPrivate) {
								privateFrames.get(packet.to).jTextArea1
										.append(date + " " + packet.from + ": "
												+ packet.messageData
												+ "\n");
							} else {
								groupFrames.get(packet.to).jTextArea1
										.append(date + " " + packet.from + ": "
												+ packet.messageData
												+ "\n");
							}
							break;

						// call operations
						case "call":

							if (packet.isLeave) {
								VoiceChat.leave();
							} else {
								VoiceChat.join(packet.port, packet.userAddresses);
							}

							break;

						// receive voice note
						case "voicenote":
							System.out.println("VOICE NOTE RECEIVED");

							date = new java.util.Date().toString();
							date = date.substring(11, 16);

							String vnFileName = "voicenote" + packet.from + "_" + vnCount + ".wav";

							// print voice note name in chat
							if (packet.isPrivate) {
								privateFrames.get(packet.to).jTextArea1
										.append(date + " " + packet.from + " sent a voice note : " + vnFileName + "\n");
							} else {
								groupFrames.get(packet.to).jTextArea1
										.append(date + " " + packet.from + " sent a voice note : " + vnFileName + "\n");
							}

							// save voice note to fs
							FileOutputStream newFile = new FileOutputStream("voicenotes_receive/" + vnFileName);
							newFile.write(packet.voiceNote);

							vnReceived.add(vnFileName);

							vnCount++;
							break;

						// received updated userlist
						case "userList":
							System.out.println(
									"[+] Received an updated user list");

							userList = packet.listData;

							String[] userList = Arrays.copyOf(
									packet.listData.toArray(),
									packet.listData.size(), String[].class);
							jList1.setListData(userList);

							break;

						// receive updated list of users in session
						case "sessionUsers":

							System.out.println(
									"just received some users: " + packet.listData);

							int sesId = Integer.parseInt(packet.stringData);
							String[] listToset = Arrays.copyOf(packet.listData.toArray(),
									packet.listData.size(), String[].class);
							groupFrames.get(sesId).jList2.setListData(listToset);

							break;

						// receive list of users in the call
						case "calllist":
							System.out.println("Received call List " + packet.callList);
							// print out to the textarea
							if (packet.isPrivate) {
								privateFrames.get(packet.sessionId).jTextArea1
										.append("Users in call sessions: \n \t 0 - " + packet.callList.get(0)
												+ "\n\t 1 - " + packet.callList.get(1) + "\n\t 2 - "
												+ packet.callList.get(2) + "\n\t 3 - " + packet.callList.get(3) + "\n");
							} else {
								groupFrames.get(packet.sessionId).jTextArea1
										.append("Users in call sessions: \n \t 0 - " + packet.callList.get(0)
												+ "\n\t 1 - " + packet.callList.get(1) + "\n\t 2 - "
												+ packet.callList.get(2) + "\n\t 3 - " + packet.callList.get(3) + "\n");
							}

							break;

						case "disconnectSession":

							int curSesId = packet.sessionId;

							if (packet.isPrivate) {

								// send message to indicate disconnection
								packet = new Packet("message", username, curSesId,
										" [!] This user has disconnected",
										true);

								out.writeObject(packet);

								// close frame
								privateFrames.get(curSesId).setVisible(false);

								// remove from privateframes
								privateFrames.remove(curSesId);
							} else {

								// send message to indicate disconnection
								packet = new Packet("message", username, curSesId,
										" [!] This user has disconnected",
										false);

								out.writeObject(packet);

								// close frame
								groupFrames.get(curSesId).setVisible(false);

								// remove from groupframes
								groupFrames.remove(curSesId);
							}
							break;

						// handle any errors
						case "error":
							System.out.println("[!] Server Error: "
									+ packet.stringData);
							break;
						default:
							System.out.println(
									"[!] Client received an invalid/unknown packet from server "
											+ packet.type);

					}
				} catch (Exception e) {
					// e.printStackTrace();
					// System.out.println("[!] Error reading TCP packet from server");
				}
			}
		}).start();

	}

	/**
	 * main method of the client frame, this never runs.
	 * 
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel.
		 * For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		}
		// </editor-fold>

	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	public javax.swing.JLabel jLabel7;
	public javax.swing.JLabel jLabel8;
	public javax.swing.JList<String> jList1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel9;
	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables
}
